#include "module.h"

#include <lib/comment/comment.h>

#include <clang/AST/RecursiveASTVisitor.h>

using namespace Waffle;

namespace {

constexpr std::string_view MODULE_NAME = "enum_serializer";

constexpr std::string_view COMMAND_SERIALIZABLE = "serializable";
constexpr std::string_view COMMAND_STRING_VALUE = "stringvalue";

struct EnumData {
    using StringValues = std::vector<std::string>;
    using EnumConstantAndStringValue = std::pair<const clang::EnumConstantDecl*, StringValues>;

    const clang::EnumDecl* Decl;
    std::vector<EnumConstantAndStringValue> Constants;
};

class EnumVisitor : public clang::RecursiveASTVisitor<EnumVisitor> {
public:
    explicit EnumVisitor(clang::ASTContext& ctx) : Ctx_{ctx} {}

    bool VisitEnumDecl(clang::EnumDecl* decl) {
        if (ParseCommentData(Ctx_, *decl)->FindByName(COMMAND_SERIALIZABLE)) {
            AddSerializedEnum(decl);
        }
        return true;
    }

    const std::vector<EnumData>& GetDatas() const {
        return Datas_;
    }

private:
    void AddSerializedEnum(const clang::EnumDecl* decl) {
        auto& data = Datas_.emplace_back();
        data.Decl = decl;
    }

private:
    clang::ASTContext& Ctx_;
    std::vector<EnumData> Datas_;
};

} // namespace

std::string_view EnumSerializerModule::Name() const {
    return MODULE_NAME;
}

std::span<const std::string_view> EnumSerializerModule::Commands() const {
    static const std::vector<std::string_view> COMMANDS = {
        COMMAND_SERIALIZABLE,
        COMMAND_STRING_VALUE,
    };
    return COMMANDS;
}

void EnumSerializerModule::Do(Context& ctx) const {
    EnumVisitor visitor{ctx.AstContext};
    visitor.TraverseDecl(ctx.AstContext.getTranslationUnitDecl());

    const auto& enumDatas = visitor.GetDatas();
    if (enumDatas.size() == 0) {
        // met no @serializable enums, don't create file
        return;
    }

    auto& printer = ctx.FileManager.GetOrCreateFilePrinter("temp.cpp");
    printer << "// Generated by the Waffle++ code generator. DO NOT EDIT!\n";
    printer << "// source: " << ctx.InFile << "\n";
    printer << "int kek = 1337;\n";
    for (const auto& enumData : enumDatas) {
        std::string qualifiedName;
        llvm::raw_string_ostream output(qualifiedName);
        enumData.Decl->printQualifiedName(output);
        printer << "// " << qualifiedName << "\n";
    }
}

REGISTER_MODULE(EnumSerializerModule);
