// Generated by the Waffle++ code generator. DO NOT EDIT!
// source: {{ source_file }}

#include "{{ source_file }}"

namespace Waffle {

## for class in classes
// @brief generated from {{ class.stub_name }}
class {{ class.name }} {
public:
    explicit {{ class.name }}(
## for field in class.fields
        {{ field.type }}{{ ref(field) }} {{ field.name }}{{ commaIfNotLast(loop.is_last) }}
## endfor
    )
## for field in class.fields
{% if field.is_light_type %}
        {{ ctorColonOrComma(loop.is_first) }} {{ privateField(field.name) }}({{ field.name }})
{% else %}
        {{ ctorColonOrComma(loop.is_first) }} {{ privateField(field.name) }}(std::move({{ field.name }}))
{% endif %}
## endfor
    {}

## for field in class.fields
{% if field.is_light_type %}
    void {{ setter(field.name) }}({{ field.type }} {{ field.name }}) {
        {{ privateField(field.name) }} = {{ field.name }};
    }
    {{ field.type }} {{ getter(field.name) }}() const {
        return {{ privateField(field.name) }};
    }
{% else %}
    void {{ setter(field.name) }}({{ field.type }}&& {{ field.name }}) {
        {{ privateField(field.name) }} = std::move({{ field.name }});
    }
    void {{ setter(field.name) }}(const {{ field.type }}& {{ field.name }}) {
        {{ privateField(field.name) }} = {{ field.name }};
    }
    const {{ field.type }}& {{ getter(field.name) }}() const {
        return {{ privateField(field.name) }};
    }
{% endif %}

## endfor
private:
## for field in class.fields
    {{ field.type }} {{ privateField(field.name) }};
## endfor
};

## endfor
} // namespace Waffle
